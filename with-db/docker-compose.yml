services:
  proxysql:
    image: proxysql/proxysql:2.5.5
    container_name: proxysql
    hostname: proxysql
    ports:
      - "6032:6032"
      - "6033:6033"
    volumes:
      - ../common/config/proxysql.cnf:/etc/proxysql.cnf:ro
    healthcheck:
      test: ["CMD", "mysql", "-h", "127.0.0.1", "-P", "6032", "-u", "admin", "-padmin", "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      setup:
        condition: service_completed_successfully

  setup:
    image: mysql:5.7
    hostname: setup
    container_name: setup
    restart: "no"
    entrypoint: /run.sh
    volumes:
      - ./run.sh:/run.sh
      - ./redmine-dump.sql:/redmine-dump.sql:ro
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    depends_on:
      master:
        condition: service_healthy
      slave1:
        condition: service_healthy
      slave2:
        condition: service_healthy
      slave3:
        condition: service_healthy

  master:
    image: mysql:5.7
    hostname: master
    container_name: master
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=1
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - master_data:/var/lib/mysql
      - ../common/config/my.cnf:/etc/mysql/my.cnf:ro
      - ../common/config/1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      MYSQL_ROOT_HOST: "%"
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

  slave1:
    image: mysql:5.7
    hostname: slave1
    container_name: slave1
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=2
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ../common/config/my.cnf:/etc/mysql/my.cnf:ro
      - ../common/config/1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ../common/config/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
      - slave1_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      master:
        condition: service_healthy

  slave2:
    image: mysql:5.7
    hostname: slave2
    container_name: slave2
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=3
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ../common/config/my.cnf:/etc/mysql/my.cnf:ro
      - ../common/config/1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ../common/config/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
      - slave2_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      master:
        condition: service_healthy

  slave3:
    image: mysql:5.7
    hostname: slave3
    container_name: slave3
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=4
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ../common/config/my.cnf:/etc/mysql/my.cnf:ro
      - ../common/config/1_network.cnf:/etc/mysql/conf.d/1_network.cnf:ro
      - ../common/config/slave.cnf:/etc/mysql/conf.d/slave.cnf:ro
      - slave3_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: repl_user
      MYSQL_PASSWORD: repl_pass123
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      master:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"
    volumes:
      - ../common/config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - redmine1
      - redmine2
      - redmine3
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3

  redmine1:
    build:
      context: ../common/docker
      dockerfile: Redmine.Dockerfile
    container_name: redmine1
    hostname: redmine1
    restart: unless-stopped
    environment:
      CONTAINER_NAME: redmine1
      REDMINE_DB_HOST: proxysql
      REDMINE_DB_PORT: 6033
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine_password
      REDMINE_DB_DATABASE: redmine
      REDMINE_DB_POOL: 25
      REDMINE_DB_ENCODING: utf8mb4
      TZ: Europe/Istanbul
      RAILS_ENV: production
      REDMINE_LANG: tr
      SKIP_DATABASE_MIGRATION: "true"
      RAILS_SKIP_MIGRATIONS: "true"
      SKIP_RAKE_TASKS: "true"
      DISABLE_DATABASE_ENVIRONMENT_CHECK: "1"
      SECRET_KEY_BASE: "some-really-really-long-secret-key-base-123456789"
    volumes:
      - ../volume/redmine-logs:/var/log/redmine:rw
      - ../volume/redmine-plugins:/usr/src/redmine/plugins
      - ../volume/repos:/home/redmine/repos
      - ../common/config/additional_environment.rb:/usr/src/redmine/config/additional_environment.rb
      - ../volume/redmine-themes:/usr/src/redmine/public/themes
      - ../volume/redmine-data:/usr/src/redmine/files
      - ../common/config/database.yml:/usr/src/redmine/config/database.yml:ro
      - ../common/config/configuration.yml:/usr/src/redmine/config/configuration.yml:ro
      - ../common/config/initializers/redis_session_store.rb:/usr/src/redmine/config/initializers/redis_session_store.rb

    depends_on:
      proxysql:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  redmine2:
    build:
      context: ../common/docker
      dockerfile: Redmine.Dockerfile
    container_name: redmine2
    hostname: redmine2
    restart: unless-stopped
    environment:
      CONTAINER_NAME: redmine2
      REDMINE_DB_HOST: proxysql
      REDMINE_DB_PORT: 6033
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine_password
      REDMINE_DB_DATABASE: redmine
      REDMINE_DB_POOL: 25
      REDMINE_DB_ENCODING: utf8mb4
      TZ: Europe/Istanbul
      RAILS_ENV: production
      REDMINE_LANG: tr
      SKIP_DATABASE_MIGRATION: "true"
      RAILS_SKIP_MIGRATIONS: "true"
      SKIP_RAKE_TASKS: "true"
      DISABLE_DATABASE_ENVIRONMENT_CHECK: "1"
      SECRET_KEY_BASE: "some-really-really-long-secret-key-base-123456789"
    volumes:
      - ../volume/redmine-logs:/var/log/redmine:rw
      - ../volume/redmine-plugins:/usr/src/redmine/plugins
      - ../common/config/additional_environment.rb:/usr/src/redmine/config/additional_environment.rb
      - ../volume/repos:/home/redmine/repos
      - ../volume/redmine-themes:/usr/src/redmine/public/themes
      - ../volume/redmine-data:/usr/src/redmine/files
      - ../common/config/database.yml:/usr/src/redmine/config/database.yml:ro
      - ../common/config/configuration.yml:/usr/src/redmine/config/configuration.yml:ro
      - ../common/config/initializers/redis_session_store.rb:/usr/src/redmine/config/initializers/redis_session_store.rb

    depends_on:
      proxysql:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  redmine3:
    build:
      context: ../common/docker
      dockerfile: Redmine.Dockerfile
    container_name: redmine3
    hostname: redmine3
    restart: unless-stopped
    environment:
      CONTAINER_NAME: redmine3
      REDMINE_DB_HOST: proxysql
      REDMINE_DB_PORT: 6033
      REDMINE_DB_USERNAME: redmine
      REDMINE_DB_PASSWORD: redmine_password
      REDMINE_DB_DATABASE: redmine
      REDMINE_DB_POOL: 25
      REDMINE_DB_ENCODING: utf8mb4
      TZ: Europe/Istanbul
      RAILS_ENV: production
      REDMINE_LANG: tr
      SKIP_DATABASE_MIGRATION: "true"
      RAILS_SKIP_MIGRATIONS: "true"
      SKIP_RAKE_TASKS: "true"
      DISABLE_DATABASE_ENVIRONMENT_CHECK: "1"
      SECRET_KEY_BASE: "some-really-really-long-secret-key-base-123456789"
    volumes:
      - ../volume/redmine-logs:/var/log/redmine:rw
      - ../volume/redmine-plugins:/usr/src/redmine/plugins
      - ../volume/repos:/home/redmine/repos
      - ../common/config/additional_environment.rb:/usr/src/redmine/config/additional_environment.rb
      - ../volume/redmine-themes:/usr/src/redmine/public/themes
      - ../volume/redmine-data:/usr/src/redmine/files
      - ../common/config/database.yml:/usr/src/redmine/config/database.yml:ro
      - ../common/config/configuration.yml:/usr/src/redmine/config/configuration.yml:ro
      - ../common/config/initializers/redis_session_store.rb:/usr/src/redmine/config/initializers/redis_session_store.rb
    depends_on:
      proxysql:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - TZ=Europe/Istanbul
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  # https://deniz-turkmen.medium.com/promethues-grafana-a9c6a877803b
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    hostname: monitoring_prometheus
    restart: unless-stopped
    user: root
    volumes:
      - ../volume/prometheus_data:/prometheus
      - ../common/config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
      - '--web.route-prefix=/'
    expose:
      - 9090
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - default
    depends_on:
      mysql-exporter:
        condition: service_started
      node-exporter:
        condition: service_started

  node-exporter:
      image: prom/node-exporter:latest
      container_name: monitoring_node_exporter
      restart: unless-stopped
      expose:
        - 9100
      ports:
        - 9100:9100
      depends_on:
        proxysql:
          condition: service_healthy

  # mysql-exporter:
  #   image: prom/mysqld-exporter:latest
  #   container_name: mysql_exporter
  #   volumes:
  #     - ./my.cnf:/etc/mysql/.my.cnf
  #   ports:
  #     - "9104:9104"

  # mysql-exporter:
  #   image: prom/mysqld-exporter:latest
  #   container_name: mysql_exporter
  #   hostname: mysql_exporter
  #   environment:
  #     # Kullanıcı, şifre, host, port bilgilerini doğru girin
  #     DATA_SOURCE_NAME: "monitor:monitor@(proxysql:6033)"
  #   ports:
  #     - "9104:9104"


  # https://discuss.prometheus.io/t/docker-compose-mysql-exporter-start-error/1734
  mysql-exporter:
    image: quay.io/prometheus/mysqld-exporter
    container_name: mysql_exporter
    restart: unless-stopped
    command:
     - "--mysqld.username=monitor:monitor"
     - "--mysqld.address=proxysql:6033"

  grafana:
    image: grafana/grafana:11.4.0
    container_name: monitoring_grafana
    hostname: monitoring_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ../common/config/grafana/provisioning:/etc/grafana/provisioning
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - default

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: -config.file=/etc/loki/loki.yaml
    ports:
      - "3100:3100"
    volumes:
      - ../common/config/loki.yaml:/etc/loki/loki.yaml
      - loki_data:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - default

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ../common/config/promtail.yaml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ../volume/redmine-logs:/var/log/redmine:rw
      - /var/log/nginx:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    networks:
      - default
  
  backup:
    image: alpine:3.17
    container_name: backup_container
    hostname: backup_container
    restart: unless-stopped
    # backup-scripts klasörünüzü container içinde /scripts olarak mount
    volumes:
      - ../common/backup-scripts:/scripts:ro       # script'ler read-only
      - ../volume/backups:/db_backups            # yedek dosyaları bu volume'a
    depends_on:
      - proxysql       # yedeği proxysql üzerinden alıyoruz
    command: /bin/sh -c "apk update && apk add --no-cache mariadb-client && /scripts/entrypoint.sh"
    environment:
      - MYSQL_HOST=slave3
      - MYSQL_PORT=3306 
      - MYSQL_USER=backup_user
      - MYSQL_PASSWORD=backup_pass
      - MYSQL_DATABASE=redmine

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.51.0
    container_name: monitoring_cadvisor
    hostname: monitoring_cadvisor
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys/fs/cgroup:/cgroup:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/localtime:/etc/localtime:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    restart: unless-stopped
    expose:
      - 8080
    ports:
      - "8585:8080"
    networks:
      - default
    command:
      - "--housekeeping_interval=30s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,hugetlb,referenced_memory,cpu_topology,resctrl"
    environment:
      - TZ=Europe/Istanbul
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  master_data:
  slave1_data:
  slave2_data:
  slave3_data:
  redmine_files:
  redmine_db:
  redis_data:
  loki_data:
  grafana_data:
  prometheus_data:
  backup_data:
  
networks:
  default:
    name: mysql_network